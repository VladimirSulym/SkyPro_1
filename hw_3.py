# Задание
# Напишите приложение, которое хранит русские и английские слова и предлагает пользователю их угадывать.
# Чтобы было проще, программа выдает подсказки с длиной слова и первой буквой.
# После каждого вопроса и ответа программа выводит, верный или неверный получен ответ, а также слово с верным переводом.
# В конце программа сообщает, какие слова были угаданы правильно, а какие нет, и выводит ранг пользователя.
#
# Пример работы программы
# Программа:
# Выберите уровень сложности.
# Легкий, средний, сложный.
#
# Пользователь:
# Легкий.
#
# Программа:
# Выбран уровень сложности. Мы предложим 5 слов, подберите перевод.
# level, 7 букв, начинается на у...
#
# Пользователь:
# Уровень
#
# Программа:
# Верно. Level — это уровень.
#
# Программа:
# Divide, 9 букв, начинается на р...
#
# Пользователь:
# Объединять.
#
# Программа:
# Неверно. Divide — это разделять.
# Еще три раунда.
#
# Программа:
# Правильно отвечены слова:
# level
# usual
# hidden
# mirror
#
# Программа:
# Неправильно отвечены слова:
# divide
#
# Программа:
# Ваш ранг:
# Хорошо.
#
# Завершение программы.
# Основные объекты
# Словари:
# * words_easy, words_medium, words_hard — словари формата {"слово": "перевод", ...}.
# * words — словарь формата {"слово": "перевод"}, в котором мы храним слова определенной сложности.
# * levels — ранги пользователя в зависимости от успехов.
# * answers — словарь с записями о верных и неверных ответах.
# Функции:
# * choose_difficulty() — функция выбора сложности.
# * play_game(words)— функция основной логики вопросов пользователю.
# Принимает аргумент words — словарь формата {"слово": "перевод"}.
# * display_results(answers) — функция вывода результатов пользователю.
# Принимает аргумент answers — словарь с записями о верных и неверных ответах.
# * calculate_rank(answers) — функция вывода пользователю ранга на основе его верных ответов.
# Принимает аргумент answers — словарь с записями о верных и неверных ответах.
#
# Шаги реализации
# Шаг 1
# Создайте словари со словами, которые нужно будет угадывать.
# В каждом словаре должно быть пять пар слов:
#
# words_easy = {
#     "family":"семья",
#     "hand": "рука",
#     "people":"люди",
#     "evening": "вечер",
#     "minute":"минута",
# }
#
# words_medium = {
#     "believe":"верить",
#     "feel": "чувствовать",
#     "make":"делать",
#     "open": "открывать",
#     "think":"думать",
# }
#
# words_hard = {
#     "rural":"деревенский",
#     "fortune": "удача",
#     "exercise":"упражнение",
#     "suggest": "предлагать",
#     "except":"кроме",
# }
#
# Создайте словарь
# levels — это уровни, которые будет получать пользователь после решения задач:
#
# levels = {
#    0: "Нулевой",
#    1: "Так себе",
#    2: "Можно лучше",
#    3: "Норм",
#    4: "Хорошо",
#    5: "Отлично",
# }
#
# Шаг 2
# Создайте функцию choose_difficulty, которая запрашивает у пользователя уровень сложности
# и возвращает соответствующий словарь слов.
#
# Внутри функции:
# * Получите у пользователя уровень сложности.
# * Создайте словарь words, положите в него один из словарей (words_easy/words_medium/words_hard)
# в зависимости от выбранной сложности.
# * Например:words = words_medium
# Функция должна вернуть словарь words.
#
# Если пользователь ввел некорректный уровень сложности (не легкий, средний или сложный),
# верните словарь со словами средней сложности.
# Добавьте управление регистром вводимого пользователем текста,
# чтобы ввод, например, слова "Легкий" не приводил к ошибке в работе программы.
#
# Шаг 3
# Создайте функцию play_game, которая принимает на вход словарь слов и проводит раунд угадывания.
#
# Создайте словарь answers. В нём будут храниться правильные и неправильные слова:
#
# answers = {}
#
# Запустите цикл по пяти словам из словаря words.
#
# Обратите внимание: вам понадобится и ключ, и значение.
# Для каждого слова выведите:
# * ключ,
# * длину слова,
# * первую букву перевода слова.
# Пример:
#
# divide, 9 букв, начинается на р...
#
# Получите у пользователя ответ, сравните ответ со значением.
# Выведите одно из сообщений (обратите внимание: слово выводится с большой буквы):
#
# Неверно. Divide — это разделять.
#
# Верно. Level — это уровень.
#
# Запишите результат в answers. Результаты должны храниться в формате:
#
# {
#   "mirror": True,
#   "divide": False,
#   "usual": True,
#   ...
# }
#
# После завершения цикла функция возвращает словарь ответов answers.
#
# Шаг 4
# Создайте функцию display_results, которая принимает на вход словарь ответов и выводит на экран правильно
# и неправильно отгаданные слова.
#
# Например:
# Правильно отвечены слова:
# divide
# usual
# hidden
# mirror
#
# Неправильно отвечены слова:
# hero
#
# Функция будет распечатывать значения в консоль, а не возвращать значение.
# Шаг 5
# Создайте функцию calculate_rank, которая принимает на вход словарь ответов и возвращает ранг пользователя в зависимости от количества правильных ответов.
#
# Посчитайте количество правильно отгаданных слов, например, получив список значений из answers.
# Используйте его в качестве ключа, чтобы получить ранг пользователя из словаря levels.
#
# Выведите ранг пользователя, например:
#
# Ваш ранг:
# Хорошо
#
# Шаг 6
# * Используйте созданные функции для организации игры. Вызывайте функции и присваивайте возвращаемые результаты переменным.
# * Постарайтесь минимизировать дублирование кода, используя функции.
# * Убедитесь, что каждая функция выполняет только одну задачу и хорошо читаема.
# * Проверьте функции на корректность работы в различных сценариях.


words_easy = {
    "family": "семья",
    "hand": "рука",
    "people": "люди",
    "evening": "вечер",
    "minute": "минута",
}

words_medium = {
    "believe": "верить",
    "feel": "чувствовать",
    "make": "делать",
    "open": "открывать",
    "think": "думать",
}

words_hard = {
    "rural": "деревенский",
    "fortune": "удача",
    "exercise": "упражнение",
    "suggest": "предлагать",
    "except": "кроме",
}

levels = {
    0: "Нулевой",
    1: "Так себе",
    2: "Можно лучше",
    3: "Норм",
    4: "Хорошо",
    5: "Отлично",
}

# Словарь answers. В нём хранятся правильные и неправильные слова
answers = {}


def choose_difficulty():
    """
    Функция запрашивает у пользователя уровень сложности
    и возвращает соответствующий словарь слов.
    :return: words:
    """
    words = {}
    print('Выберите уровень сложности.\nЛегкий, средний, сложный.')
    level = input().lower()
    if level == 'легкий':
        words = words_easy
    elif level == 'сложный':
        words = words_hard
    else:
        words = words_medium
    return words


def play_game(words):
    """
    Функция, которая принимает на вход словарь слов и проводит раунд угадывания.
    :param words:
    :return: answers:
    """
    answers = {}
    print('Выбран уровень сложности. Мы предложим 5 слов, подберите перевод.')
    for kye, value in words.items():
        print(f'{kye}, {len(value)} букв, начинается с {value[0]}...')
        answer = input().lower()
        if answer == value:
            print(f'Верно. {kye.title()} — это {value}.')
            answers[kye] = True
        else:
            print(f'Неверно. {kye.title()} — это {value}.')
            answers[kye] = False
    return answers


def display_results(answers):
    """
    Функция, которая принимает на вход словарь ответов и выводит на экран правильно и неправильно отгаданные слова.
    :param answers:
    :return:
    """
    print('Правильно отвечены слова:')
    for kye, value in answers.items():
        if value:
            print(kye)
    print('Неправильно отвечены слова:')
    for kye, value in answers.items():
        if not value:
            print(kye)


def calculate_rank(answers):
    """
    Функция, которая принимает на вход словарь ответов и возвращает ранг пользователя в зависимости
    от количества правильных ответов.
    :param answers:
    :return:
    """
    rank = 0
    for items in answers.values():
        if items:
            rank += 1
    print(f'Ваш ранг:\n{levels[rank]}')

# Вывод документации (Докстринг) по функции
print(choose_difficulty.__doc__)
answers = play_game(choose_difficulty())
display_results(answers)
calculate_rank(answers)
